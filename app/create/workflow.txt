### WORKFLOW EXPLANATION: GENERATING A COURSE OUTLINE & NOTES
### **Inngest Integration**nngest ensures that after the course is created, notes are generated in the background without slowing down the main request-response flow.

1. **USER TRIGGERS COURSE GENERATION**  
   - The process begins when a user calls `GenerateCourseOutline`. This function:  
     - Generates a **unique course ID** using `uuidv4()`.  
     - Logs the **request payload** and sets a loading state.  
     - Sends an **API request** (`POST /api/generate-course-outline`) with user-provided data (`courseId`, `topic`, `courseType`, `difficultyLevel`, `createdBy`).  
     - If successful, the UI updates, navigating the user to the dashboard with a toast notification.

2. **API PROCESSES THE REQUEST**  
   - The backend receives the API request (`POST /api/generate-course-outline`):  
     - Extracts **course details** from the request body.  
     - **Generates a course layout** using AI (`courseOutlineAIModel`). The AI receives a **prompt** to create structured study materials (summary, chapters, topics, and emoji icons).  
     - **Parses AI-generated content** and inserts it into the database (`STUDY_MATERIAL_TABLE`).  
     - Logs a success message and **triggers an Inngest event** (`notes.generate`) with the newly inserted course.

3. **INNGEST FUNCTION TRIGGERS NOTES GENERATION**  
   - The `GenerateNotes` function listens for the `notes.generate` event. Once triggered:  
     - It retrieves the **generated course content** from the event data.  
     - Iterates through each **chapter** in the course and constructs an **AI prompt** to generate detailed **chapter notes** (explanations, key points, code examples in `<precode>`).  
     - Sends the AI prompt to `generateNotesAiModel`, which responds with **HTML-formatted notes**.  
     - Inserts the **notes into the database** (`CHAPTER_NOTES_TABLE`).  
     - Updates the **course status** to `"Ready"` in `STUDY_MATERIAL_TABLE` after processing all chapters.

4. **AI MODEL GENERATES CHAPTER NOTES**  
   - The `generateNotesAiModel` is pre-configured to generate structured content in **HTML format**. It processes each chapter request using an AI model that understands:  
     - The **context of the course** (topics, difficulty level, and course type).  
     - The **expected structure** (headings, explanations, code examples, and styled content).  
     - The **formatting requirements** (ensuring HTML output without unnecessary tags).  

### FINAL OUTCOME  
- The **course outline** is generated and stored in the database.  
- The **notes for each chapter** are created and linked to the course.  
- The **course status** updates to `"Ready"`, making it available for users.  
- The entire process runs **seamlessly and asynchronously**, ensuring efficiency in content creation.

ðŸš€ **This workflow automates course creation, integrates AI-powered content generation, and streamlines the learning experience for users!**